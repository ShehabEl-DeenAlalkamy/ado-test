parameters:
  - name: env
    type: string
    default: ""

  - name: stageName
    default: ""
    type: string

  - name: stageDisplayName
    default: ""
    type: string

  - name: buildReason
    default: ""
    type: string

  - name: isTargetBranch
    default: true
    type: boolean

  - name: isProductionised
    type: boolean
    default: false

stages:
  - stage: ${{ parameters.stageName }}
    displayName: ${{ parameters.stageDisplayName }}
    condition: and(eq(variables['Build.Reason'], '${{ parameters.buildReason }}'), ${{ parameters.isTargetBranch }})
    variables:
      - template: ../vars/vars-${{ parameters.env }}.yml
    jobs:
      # - job: TestJob
      #   displayName: Test Job
      #   steps:
      #     - script: |
      #         echo 'stagename        : ${{ variables.stageName }}'
      #         echo 'stagedisplayname : ${{ variables.stageDisplayName }}'
      #         echo 'namespace        : ${{ variables.namespace }}'
      #         echo 'buildreason      : ${{ variables.buildReason }}'
      #         echo 'istargetbranch   : ${{ variables.isTargetBranch }}'
      #       displayName: Logging File Variables

      # - job: TestJob2
      #   displayName: Test Job2
      #   dependsOn: TestJob
      #   steps:
      #     - script: |
      #         echo 'stagename        : ${{ variables.stageName }}'
      #         echo 'stagedisplayname : ${{ variables.stageDisplayName }}'
      #         echo 'namespace        : ${{ variables.namespace }}'
      #         echo 'buildreason      : ${{ variables.buildReason }}'
      #         echo 'istargetbranch   : ${{ variables.isTargetBranch }}'
      #       displayName: Logging File Variables

      # - job: TestJob3
      #   displayName: Test Job3
      #   dependsOn: TestJob2
      #   steps:
      #     - script: |
      #         echo 'stagename        : ${{ variables.stageName }}'
      #         echo 'stagedisplayname : ${{ variables.stageDisplayName }}'
      #         echo 'namespace        : ${{ variables.namespace }}'
      #         echo 'buildreason      : ${{ variables.buildReason }}'
      #         echo 'istargetbranch   : ${{ variables.isTargetBranch }}'
      #       displayName: Logging File Variables
      - ${{ if parameters.isProductionised }}:
          # Run a Bash script on macOS, Linux, or Windows
          # - job: CheckChanges
          #   displayName: Check for Changes
          #   steps:
          #     - task: Bash@3
          #       name: check_changes
          #       displayName: "Bash"
          #       inputs:
          #         filePath: build/source_code_changed.sh
          #         arguments: app
          - job: CheckChanges
            displayName: "Check changes"
            steps:
              - bash: |
                  PATH_FILTER="src/"
                  CHANGED_FILES=$(git diff HEAD HEAD~ --name-only)
                  MATCH_COUNT=0

                  echo "Checking for file changes..."
                  for FILE in $CHANGED_FILES
                  do
                    if [[ $FILE == *$PATH_FILTER* ]]; then
                      echo "MATCH:  ${FILE} changed"
                      MATCH_COUNT=$(($MATCH_COUNT+1))
                    else
                      echo "IGNORE: ${FILE} changed"
                    fi
                  done

                  echo "$MATCH_COUNT match(es) for filter '$PATH_FILTER' found."
                  if [[ $MATCH_COUNT -gt 0 ]]; then
                    echo "##vso[task.setvariable variable=SOURCE_CODE_CHANGED;isOutput=true]true"
                  else
                    echo "##vso[task.setvariable variable=SOURCE_CODE_CHANGED;isOutput=true]false"
                  fi
                name: check_changes
                displayName: "Check changed files"

      - job: TestApp
        displayName: Test
        ${{ if parameters.isProductionised }}:
          condition: eq(dependencies.CheckChanges.outputs['check_changes.SOURCE_CODE_CHANGED'], 'true')
        steps:
          - template: ../steps/maven-test.yml
            parameters:
              vars: ${{ variables }}

      - job: BuildApp
        displayName: Build
        dependsOn: TestApp
        steps:
          - template: ../steps/maven-build.yml
            parameters:
              vars: ${{ variables }}
          - template: ../steps/artifacts.yml
            parameters:
              vars: ${{ variables }}

      - job: DeployApp
        displayName: Deploy
        dependsOn: BuildApp
        steps:
          - template: ../steps/deploy-to-k8s.yml
            parameters:
              vars: ${{ variables }}

      - job: TestFailureHandling
        displayName: Error Handling
        dependsOn:
          - TestApp
          - BuildApp
        condition: failed()
        steps:
          - template: ../steps/send-notifications-to-team.yml
            parameters:
              vars: ${{ variables }}

  # - stage: ${{ variables.stageName }}
  #   displayName: ${{ variables.stageDisplayName }}
  #   condition: and(always(), eq(variables['Build.Reason'], '${{ variables.buildReason }}'), ${{ variables.isTargetBranch }})
  #   variables:
  #     - template: vars/vars-${{ parameters.environment }}.yml
  #   jobs:
  #     - job: Test
  #       displayName: Test
  #       steps:
  #         - script: exit 1

  #     - job: BuildAndDeploy
  #       displayName: Build & Depoly
  #       dependsOn: Test
  #       steps:
  #         - script: echo Build Image
  #         - script: echo Push Image
  #         - script: echo Deploy to ${{ variables.namespace }}
  #         - script: echo RollBack

  #     - job: SendErrorNotification
  #       displayName: Send Error Notification
  #       dependsOn: Test
  #       condition: failed()
  #       steps:
  #         - script: echo Sending Notification to Development Team
